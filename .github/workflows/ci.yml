name: Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  PLAYDATE_SDK_VERSION: 2.0.3
  PLAYDATE_SDK_PATH: ${{ github.workspace }}/PlaydateSDK

jobs:
  # Cargo package checks
  checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64
          - thumbv7em
        profile:
          - debug
          - release
    env:
      CARGO_BUILD_FLAGS: --target ${{ matrix.target == 'x86_64' && 'x86_64-unknown-linux-gnu' || 'thumbv7em-none-eabihf' }} ${{ matrix.profile == 'release' && '--release' || '' }}
      CARGO_TARGET: ${{ matrix.target == 'x86_64' && 'x86_64-unknown-linux-gnu' || 'thumbv7em-none-eabihf' }}
    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v3
      # Install Playdate SDK
      - name: Install Playdate SDK
        run: |
          mkdir PlaydateSDK
          curl -L https://download-keycdn.panic.com/playdate_sdk/Linux/PlaydateSDK-${{ env.PLAYDATE_SDK_VERSION }}.tar.gz | tar xz --strip 1 -C PlaydateSDK
      # Setup up rust toolchain
      - name: Setup Rust Toolchain
        run: rustup update stable && rustup target add ${{ env.CARGO_TARGET }}
      # Build all projects except playdate-cli
      - name: Cargo Build (${{ matrix.target }}, ${{ matrix.profile }})
        run: cargo build --workspace ${{ env.CARGO_BUILD_FLAGS }} --exclude playdate-cli
      # Test sys package
      - name: Cargo Test (${{ matrix.target }}, ${{ matrix.profile }})
        run: cargo test -p playdate-rs-sys ${{ env.CARGO_BUILD_FLAGS }}
        if: ${{ matrix.target == 'x86_64' }}
      # Format checks
      - name: Cargo clippy checks
        run: cargo clippy ${{ env.CARGO_BUILD_FLAGS }} -- -D warnings
        if: ${{ matrix.target == 'x86_64' }}

  # Cargo format checks
  format-checks:
    runs-on: ubuntu-latest
    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v3
      # Setup up rust toolchain
      - name: Setup Rust Toolchain
        run: rustup update stable
      # Format checks
      - name: Cargo fmt checks
        run: cargo fmt -- --check

  # Playdate CLI integration checks
  cli-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64
          - thumbv7em
        profile:
          - debug
          - release
        cli-command:
          - init
          - new
        playdate-rs-version:
          - head
          - crates-io
        exclude:
          - cli-command: new
            playdate-rs-version: head
    env:
      CARGO_PROFILE_BUILD_FLAGS: ${{ matrix.target == 'thumbv7em' && '--device' || '' }} ${{ matrix.profile == 'release' && '--release' || '' }}
      CARGO_TARGET: ${{ matrix.target == 'x86_64' && 'x86_64-unknown-linux-gnu' || 'thumbv7em-none-eabihf' }}
    steps:
      # Install packages
      - name: Install gcc-arm-none-eabi
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi
        if: ${{ matrix.target == 'thumbv7em' }}
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v3
      # Install Playdate SDK
      - name: Install Playdate SDK
        run: |
          mkdir PlaydateSDK
          curl -L https://download-keycdn.panic.com/playdate_sdk/Linux/PlaydateSDK-${{ env.PLAYDATE_SDK_VERSION }}.tar.gz | tar xz --strip 1 -C PlaydateSDK
      # Setup up rust toolchain
      - name: Setup Rust Toolchain
        run: rustup update stable && rustup target add ${{ env.CARGO_TARGET }}
      # Install playdate-cli
      - name: Install playdate-cli
        run: |
          cargo install --path .
          rm -r ../.cargo
        working-directory: playdate-cli
      # Create or init new project
      - name: Create cargo playdate project
        run: cargo playdate new new-project
        if: ${{ matrix.cli-command == 'new' }}
      - name: Init cargo playdate project (crates.io)
        run: mkdir new-project && cd new-project && cargo playdate init
        if: ${{ matrix.cli-command == 'init' && matrix.playdate-rs-version == 'crates-io' }}
      - name: Init cargo playdate project (head)
        run: mkdir new-project && cd new-project && cargo playdate init --use-local-playdate-rs ${{ github.workspace }}/playdate-rs
        if: ${{ matrix.cli-command == 'init' && matrix.playdate-rs-version == 'head' }}
      # Build project
      - name: Build cargo playdate project
        run: cargo playdate build ${{ env.CARGO_PROFILE_BUILD_FLAGS }}
        working-directory: new-project
      # Format checks
      - name: Cargo fmt checks
        run: cargo fmt -- --check
        working-directory: new-project
      - name: Cargo clippy checks
        run: cargo clippy -- -D warnings
        working-directory: new-project
        if: ${{ matrix.target == 'x86_64' }}

  # Cargo format checks
  build-docs:
    runs-on: ubuntu-latest
    env:
      DOCS_RS: "1"
    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v3
      # Setup up rust toolchain
      - name: Setup Rust Toolchain
        run: rustup default nightly
      # Build docs
      - name: Build cargo docs (debug)
        run: cargo doc --workspace --no-deps
      - name: Build cargo docs (release)
        run: cargo doc --workspace --no-deps --release

  # Publish packages
  publish-crates:
    runs-on: ubuntu-latest
    needs: [checks, cli-checks, build-docs]
    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v3
      # Setup up rust toolchain
      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
      # Publish crates
      - name: Publish playdate-rs-sys
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          path: "./playdate-rs-sys"
          ignore-unpublished-changes: true
      - name: Publish playdate-rs-macros
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          path: "./playdate-rs/macros"
          ignore-unpublished-changes: true
      - name: Publish playdate-rs
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          path: "./playdate-rs"
          ignore-unpublished-changes: true
      - name: Publish playdate-cli
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          path: "./playdate-cli"
          ignore-unpublished-changes: true

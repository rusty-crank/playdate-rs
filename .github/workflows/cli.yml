name: Check Playdate CLI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  PLAYDATE_SDK_VERSION: 2.0.3
  PLAYDATE_SDK_PATH: ${{ github.workspace }}/PlaydateSDK

jobs:
  cli-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - thumbv7em-none-eabihf
        profile:
          - debug
          - release
        cli-command:
          - init
          - new
    env:
      CARGO_PROFILE_BUILD_FLAGS: ${{ matrix.profile == 'thumbv7em-none-eabihf' && '--device' || '' }} ${{ matrix.profile == 'release' && '--release' || '' }}
    steps:
      # Install packages
      - name: Install gcc-arm-none-eabi
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-none-eabi
        if: ${{ matrix.target == 'thumbv7em-none-eabihf' }}
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v3
      # Install Playdate SDK
      - name: Install Playdate SDK
        run: |
          mkdir PlaydateSDK
          curl -L https://download-keycdn.panic.com/playdate_sdk/Linux/PlaydateSDK-${{ env.PLAYDATE_SDK_VERSION }}.tar.gz | tar xz --strip 1 -C PlaydateSDK
      # Setup up rust toolchain
      - name: Setup Rust Toolchain
        run: rustup update stable && rustup target add ${{ matrix.target }}
      # Install playdate-cli
      - name: Install playdate-cli
        run: cargo install --path .
      # Create or init new project
      - name: Create cargo playdate project
        run: cargo playdate new new-project
        if: ${{ matrix.cli-command == 'new' }}
      - name: Init cargo playdate project
        run: mkdir new-project && cd new-project && cargo playdate init new-project
        if: ${{ matrix.cli-command == 'init' }}
      # Build project
      - name: Build cargo playdate project
        run: cargo playdate build ${{ env.CARGO_PROFILE_BUILD_FLAGS }}
        working-directory: new-project
      # Format checks
      - name: Cargo fmt checks
        run: cargo fmt -- --check
        working-directory: new-project
      - name: Cargo clippy checks
        run: cargo clippy -- -D warnings
        working-directory: new-project
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
